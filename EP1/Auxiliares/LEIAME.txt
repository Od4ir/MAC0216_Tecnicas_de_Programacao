>> AUTOR:

    Nome: Odair Gonçalves de Oliveira
    Nº USP: 13671581
    Email: od4ir@usp.br


>> DESCRIÇÃO:

    Este projeto consiste no Exercício Programa I (EP1) da disciplina MAC 0216 - 
    Técnicas de Programação I, orientada pelo professor Daniel Macedo Batista, no
    curso de Ciência da Computação do Instituto de Mamemática e Estatística da
    Universidade de São Paulo (IME - USP). 

    O projeto consiste em dois programas escritos em 2 linguagens diferentes:
    Python e Assembly. Os programas recebem um texto passado como entrada pelo
    terminal e devolvem um código de 32 caracteres utilizando os dígitos do sis-
    tema hexadecimal. 

    A ideia do programa é simular um algoritmo de hashing, que recebe uma entrada
    de tamanho variável e a mapeia para uma saída de tamanho constante. No caso,
    a entrada é o texto e a saída de tamanho constante é o código de 32 caracteres
    construído com os dígitos do sistema hexadecimal. 


>> COMO GERAR O EXECUTÁVEL:
    Para gerar o executável (a.out) em Assembly, basta digitar no terminal:
    > nasm -f elf64 -g -o EP.o EP.s
    > ld -s -o a.out EP.o 

    * Lembrando que esse programa foi feito pensando numa arquitetura x86_64.
    ** O parâmetro -g pode ser retirado caso não deseje debugar o código utilizando
    o GDB.


COMO EXECUTAR:

    /////////// PYTHON: ///////////
        Para o código em Python, basta digitar no terminal:
            :~$ python ep1.py

        Após isso, irá aparecer na tela:
            :~$ Digite uma string: 

        Basta digitar o texto desejado e pressionar enter para produzir o 
        código que será semelhante ao exposto a seguir (no sentido de tamanho
        e caracteres usados, provavelmente vai ser algo bem mais aleatório):
            :~$ abcdef1234567890abcdef1234567890

        Para passar um arquivo, por exemplo, 'textoexemplo.txt' como entrada,
        basta digitar no terminal:
            :~$ python ep1.py < textoexemplo.txt

        A saída nesse caso será:
            :~$ Digite uma string:
            :~$ < Código de 32 caracteres gerado >

    /////////// ASSEMBLY: ///////////
        Para o código em Assembly, após gerar o executável basta digitar no 
        terminal:
            :~$ ./a.out 
        
        Após isso, irá aparecer na tela:
            :~$ Digite uma string:
        
        E assim como o código em Python, basta digitar a string, pressionar 
        enter e verificar o código gerado na saída. 
        Para exemplos utilizando arquivo, basta digitar no terminal:
            :~$ ./a.out < textoexemplo.txt


TESTES:
    Veja a seguir alguns exemplos de testes e suas respectivas saídas esperadas:

    /////////// EXEMPLO 1: ///////////
        :~$ python EP1.py
        Digite uma string: 
        Pandas sao fofos
        8d7af7c76a92c8369d2b6f69b2fcb234

        :~$ ./a.out 
        Digite alguma string: 
        Pandas sao fofos
        8d7af7c76a92c8369d2b6f69b2fcb234

    /////////// EXEMPLO 2: ///////////
        :~$ python EP1.py
        Digite uma string: 
        Por favor me de uma nota boa
        58a078fa420bd0994c6bcf03e0b00a9b

        :~$ ./a.out 
        Digite alguma string: 
        Por favor me de uma nota boa
        58a078fa420bd0994c6bcf03e0b00a9b

    /////////// EXEMPLO 3: ///////////
        ~$ python EP1.py 
        Digite uma string: 
        Y'all haters corny with that illuminati messPaparazzi, catch my fly, and
        my cocky fresh I'm so reckless when I rock my Givenchy dress (stylin')
        I'm so possessive so I rock his Roc necklaces My daddy Alabama, momma
        Louisiana You mix that negro with that Creole make a Texas bamma I like
        my baby hair, with baby hair and afros I like my negro nose with Jackson 
        Five nostrils Earned all this money but they never take the country out 
        me I got a hot sauce in my bag, swag
        26148b07c11dcb86314d88649050b74d

        ~$ ./a.out 
        Digite alguma string: 
        Y'all haters corny with that illuminati messPaparazzi, catch my fly, and 
        my cocky fresh I'm so reckless when I rock my Givenchy dress (stylin') 
        I'm so possessive so I rock his Roc necklaces My daddy Alabama, momma 
        Louisiana You mix that negro with that Creole make a Texas bamma I like 
        my baby hair, with baby hair and afros I like my negro nose with Jackson 
        Five nostrils Earned all this money but they never take the country out 
        me I got a hot sauce in my bag, swag
        26148b07c11dcb86314d88649050b74d

DEPENDÊNCIAS:
    Sistema Operacional: Ubuntu 22.04.3 LTS  
    ld: GNU ld (GNU Binutils for Ubuntu) 2.38
    NASM: Versão 2.15.05 - Montador para linguagem Assembly;
    Python: Ver~sao 3.10.10 - Linguagem Python;
    CPU: 12th Gen Intel(R) Core(TM) i5-12500H



Para compilar um a.out:
    nasm -f elf64 -g -o EP.o EP.s    // Isso cria um arquivo EP.o (Código Objeto)
    ld -s -o a.out EP.o             // Isso cria o executável a.out para rodar o programa;
    ./a.out                         // Isso roda o programa;

Para debugar usando o gdb:
    ld -o EP1 EP.o                  // Isso cria o arquivo EP1;
    gdb EP1                         // Debugar o código;

    break _start                    // Define um ponto de parada no _start:
    break rotulo                    // Define um ponto de parada no rotulo;
    run                             // Roda o programa;
    s                               // Executa até o próximo ponto de parada
    info r                          // Mostra o que está dentro de cada registrador
    p $registrador                  // Mostra o valor específico de um registrador
    print variavel                  // Mostra o valor da variável
    x/3c &Sample
    p /x
    p /t $registrador
